name: GitHubEMU Multi-Repo Migration

on:
  workflow_dispatch:
    inputs:
      source_org:
        description: 'Source Organization'
        required: true
        type: choice
        options:
          - Kunal-test-org
      destination_org:
        description: 'Destination Organization'
        required: true
        type: choice
        options:
          - Kunal-migrated-org
      repo_list:
        description: 'Comma-separated list of repositories to migrate'
        required: false
      repo_admin:
        description: 'GitHub Username for Admin Access (e.g., Fname-Lname_cvsh)'
        required: true
      snow_app_id:
        description: 'CVS App ID (e.g., AMC012345)'
        required: false

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Convert repo list to matrix
        id: set-matrix
        run: |
          repos="${{ github.event.inputs.repo_list }}"
          json=$(echo "$repos" | jq -R 'split(",") | map({repo: .})' | jq -c '{include: .}')
          echo "matrix=$json" >> $GITHUB_OUTPUT


  migrate-repos:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    env:
      SOURCE_ORG: ${{ github.event.inputs.source_org }}
      DEST_ORG: ${{ github.event.inputs.destination_org }}
      GH_TOKEN: ${{ secrets.GH_PAT }}
      REPO_ADMIN: ${{ github.event.inputs.repo_admin }}
      SNOW_APP_ID: ${{ github.event.inputs.snow_app_id }}
    steps:
      - name: Install GitHub CLI
        run: |
          set -e
          sudo apt update && sudo apt install gh -y

      - name: Migrate repository ${{ matrix.repo }}
        run: |
          SRC_REPO="${{ matrix.repo }}"
          DEST_REPO="${{ matrix.repo }}"

          echo "Cloning $SOURCE_ORG/$SRC_REPO..."
          git clone --mirror https://x-access-token:${GH_TOKEN}@github.com/$SOURCE_ORG/$SRC_REPO.git

          cd $SRC_REPO.git
          git for-each-ref refs/pull/ --format='%(refname)' | while read ref; do
            git update-ref -d "$ref"
          done

          echo "Creating or pushing to $DEST_ORG/$DEST_REPO..."
          if ! gh repo view $DEST_ORG/$DEST_REPO &>/dev/null; then
            echo "Repository $DEST_ORG/$DEST_REPO already exists. Failing the job."
            exit 1
          else
            gh repo create "$DEST_ORG/$DEST_REPO" --private --description "Migrated from $SOURCE_ORG/$SRC_REPO"
            echo "Waiting for GitHub to register the new repository..."
            sleep 10 
          fi

          git push --mirror https://x-access-token:${GH_TOKEN}@github.com/$DEST_ORG/$DEST_REPO.git
          cd .. && rm -rf $SRC_REPO.git
          
      - name: Set Admin and Metadata
        run: |
          echo "Setting admin access for $REPO_ADMIN..."
          gh api -X PUT /repos/$DEST_ORG/${{ matrix.repo }}/collaborators/$REPO_ADMIN -f permission="admin" || true

          if [ ! -z "$SNOW_APP_ID" ]; then
            echo "Setting snow-app-id..."
            curl -s -L \
              -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${GH_TOKEN}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$DEST_ORG/${{ matrix.repo }}/properties/values" \
              -d "{\"properties\":[{\"property_name\":\"snow-app-id\",\"value\":\"$SNOW_APP_ID\"}]}" || true
          fi
          
      - name: Auto-create environments and copy variables
        run: |
          SRC_REPO="${{ matrix.repo }}"
          DEST_REPO="${{ matrix.repo }}"

          echo "Fetching environments from $SOURCE_ORG/$SRC_REPO..."
          envs=$(curl -s -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/$SOURCE_ORG/$SRC_REPO/environments | jq -r '.environments[].name')

          if [ -z "$envs" ]; then
            echo "No environments found in $SOURCE_ORG/$SRC_REPO"
            exit 0
          fi

          for env in $envs; do
            echo "Triggering environment creation in $DEST_ORG/$DEST_REPO for $env..."
            gh api -X PUT /repos/$DEST_ORG/$DEST_REPO/environments/$env || true

            echo "Copying variables from environment: $env"
            vars=$(curl -s -H "Authorization: token $GH_TOKEN" \
              https://api.github.com/repos/$SOURCE_ORG/$SRC_REPO/environments/$env/variables)

            echo "$vars" | jq -c '.variables[]' | while read var; do
              name=$(echo "$var" | jq -r '.name')
              value=$(echo "$var" | jq -r '.value')

            echo "Creating variable $name in $DEST_ORG/$DEST_REPO ($env)..."
            curl -s -X POST \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/$DEST_ORG/$DEST_REPO/environments/$env/variables \
              -d "{\"name\":\"$name\",\"value\":\"$value\"}"

            done
          done





